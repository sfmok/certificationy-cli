category: Symfony > Components > OptionsResolver
questions:
    - question: "How can you add an option named my_option without setting a default value?"
      answers:
        - { value: "$resolver->setDefined('my_option');", correct: true }
        - { value: "$resolver->setDefault('my_option', null);", correct: false }
        - { value: "$resolver->setDefault('my_option');", correct: false }
        - { value: "$resolver->setNotRequired('my_option');", correct: true }
      help: |
        http://symfony.com/doc/current/components/options_resolver.html#options-without-default-values

    - question: |
        Is it possible to define default values that depend on another option?
      answers:
        - { value: "Yes", correct: true }
        - { value: "No", correct: false }
      help: |
        https://symfony.com/doc/current/components/options_resolver.html#default-values-that-depend-on-another-option

    - question: |
        What is the correct call of setAllowedTypes to validate the value null of the my_option option?
      answers:
        - { value: "$resolver->setAllowedTypes('my_option', ['null']);", correct: true }
        - { value: "$resolver->setAllowedTypes('my_option', 'null');", correct: true }
        - { value: "$resolver->setAllowedTypes('my_option', [null]);", correct: false }
        - { value: "$resolver->setAllowedTypes('my_option', null);", correct: false }
      help: |
        https://symfony.com/doc/current/components/options_resolver.html#default-values-that-depend-on-another-option

    - question: |
        With the following class:
        
        use Symfony\Component\OptionsResolver\OptionsResolver;

        class Mailer
        {
            private $options;

            public function __construct(array $options = array())
            {
                $resolver = new OptionsResolver();
                $resolver->setDefaults(array(
                    'host'     => 'smtp.example.org',
                    'username' => 'user',
                    'password' => 'pa$$word',
                    'port'     => 25,
                ));

                $this->options = $resolver->resolve($options);
            }
        }
        
        what exception will be thrown while executing the code:
        
        $mailer = new Mailer(array(
            'usernme' => 'johndoe',
        ));
      answers:
        - { value: A Symfony\Component\OptionsResolver\Exception\InvalidOptionsException., correct: false }
        - { value: A Symfony\Component\OptionsResolver\Exception\NoSuchOptionException., correct: false }
        - { value: A Symfony\Component\OptionsResolver\Exception\OptionDefinitionException., correct: false }
        - { value: A Symfony\Component\OptionsResolver\Exception\MissingOptionsException., correct: false }
        - { value: A Symfony\Component\OptionsResolver\Exception\UndefinedOptionsException., correct: true }
      help: |
        https://symfony.com/doc/current/components/options_resolver.html#usage

    - question: |
        Which of the following are valid types to use in setAllowedTypes method of Symfony\Component\OptionsResolver\OptionsResolver to validate a integer value?
      answers:
      - { value: "integer", correct: true }
      - { value: "int", correct: true }
      - { value: "OptionsResolver::INTEGER", correct: false }
      - { value: "OptionsResolver::INT", correct: false }
      help: |
        https://symfony.com/doc/current/components/options_resolver.html#type-validation

    - question: |
        With the following code:
        
        class Mailer
        {
            // ...
            public function configureOptions(OptionsResolver $resolver)
            {
                // ...
                $resolver->setDefault('encryption', null);

                $resolver->setDefault('port', function () {
                    if ('ssl' === $options['encryption']) {
                        return 465;
                    }

                    return 25;
                });
            }
        }
        
        what would be the resolved $options passed as:
        $options = array('encryption' => 'SSL');
      answers:
      - { value: |
            $options = array(
             'encryption' => 'SSL',
             'port' => 465,
            );
        , correct: false }
      - { value: |
            $options = array(
              'encryption' => 'SSL',
              'port' => null,
            );
        , correct: false }
      - { value: |
            $options = array(
              'encryption' => 'SSL',
              'port' => function () {
                if ('ssl' === $options['encryption']) {
                  return 465;
                }
                return 25;
              },
            );
        , correct: true }
      - { value: |
            $options = array(
              'encryption' => 'SSL',
              'port' => 25,
            );
        , correct: false }
      help: |
        https://symfony.com/doc/current/components/options_resolver.html#default-values-that-depend-on-another-option